---
# - name: Provision an EC2 Instance
#   hosts: localhost
#   vars_files:
#     - aws_secret.yml
#   gather_facts: false
#   tasks:
#     - name: Initialize Terraform
#       command: terraform init
#       args:
#         chdir: ./terraform_scripts/

#     - name: Apply Terraform script
#       command: terraform apply -auto-approve
#       args:
#         chdir: ./terraform_scripts/

#     - name: Run Terraform Output for instance_ip
#       command: terraform output -json instance_ip
#       args:
#         chdir: ./terraform_scripts/
#       register: tf_output

#     - name: Set Fact for instance_ip
#       set_fact:
#         ec2_nc: "{{ tf_output.stdout | from_json }}"

#     - name: Launch a new EC2 instance
#       amazon.aws.ec2_instance:
#         aws_access_key: "{{ aws_access_key }}"
#         aws_secret_key: "{{ aws_secret_key }}"
#         name: "ec2-nc1-test"
#         instance_type: t2.micro
#         image_id: ami-01103fb68b3569475
#         count: 1
#         region: us-east-2
#         network:
#           assign_public_ip: true
#       register: ec2
    
#     - name: debug ec2
#       debug:
#         msg: "{{ ec2.instances }}"

#     - name: Wait for SSH to come up
#       wait_for:
#         host: "{{ ec2.instances }}"
#         port: 22
#         delay: 60
#         timeout: 320
#         state: started
#       with_items: "{{ ec2.instances }}"

#     - name: Show public IP
#       debug:
#         var: item.public_ip
#       with_items: "{{ ec2.instances }}"

#     - name: debug ec2.instances
#       debug:
#         msg:
#           - public_ip = "{{ ec2.instances.public_ip }}"
#           - ip_final = "{{ ec2.instances.public_ip.network_interfaces.association.public)i }}"

#     - name: set instance ip var
#       set_fact:
#         instance_ip: "{{ ec2.instances.public_ip }}"

- name: Installation and configuration of a nextcloud instance
  hosts: "nc_hosts"
  become: true
  vars_files:
     - vars/secret.yml
     - vars/vars.yml
     
  pre_tasks:
    - name: Update packages
      apt:
        update_cache: yes
        upgrade: 'yes'
        
    - name: Install docker compose and sudo
      apt:
        name:
          - docker-compose
          - sudo
          - php
        state: present

  roles:
    - docker_deploy

  tasks:
    # - name: Complete nextcloud's installation
    #   command: >
    #     docker exec -u www-data app_nc php occ maintenance:install \
    #     --database "{{ db_type }}" \
    #     --database-host "db_nc"
    #     --database-name "{{ db_name }}" \
    #     --database-user "{{ mysql_user }}" \
    #     --database-pass "{{ mysql_pwd }}" \
    #     --admin-user "{{ nc_admin }}" \
    #     --admin-pass "{{ nc_passwd }}" \
    #     --admin-email "{{ mail_addr }}"
    #   args:
    #       creates: /var/www/nextcloud/config/config.php
    #   register: setup_nc
    #   notify: Restart Apache

    - name: Generate Nextcloud config file from template
      template:
        src: templates/config.php.j2
        dest: ./config.php

    - name: Generate again the Docker Compose file from Jinja2 template
      template:
        src: docker_deploy/templates/docker-compose.yml.j2
        dest: /root/docker-compose.yml
    - block:
      - name: Redeploy Nextcloud Docker container
        community.docker.docker_compose:
          project_src: /root/
        register: output_compose
      
      - name: Ensure Docker containers are running
        docker_container:
          name: app_nc
          image: nextcloud
          volumes:
            - ".app:/var/www/html"
            - "./config.php:/var/www/html/config/config.php"
      rescue:
        - name: debug output docker compose
          debug:
            msg: "{{ output_compose }}"
          

        
    # - name: chanque skeleton nc
    #   lineinfile:
    #     path: /var/www/nextcloud/config/config.php
    #     line: "'skeletondirectory' => ''," 
    #     create: yes
    # - name: Add trusted domains
    #   command: >
    #     docker exec -u www-data app_nc php occ config:system:set trusted_domains 2 --value="{{ item.value }}"
    #   loop: "{{nc_config}}"

    # - name: Disable some applications
    #   command: >
    #     docker exec -u www-data app_nc php occ app:disable {{ item }}
    #   with_items:
    #   - dashboard
    #     - circles
    #     - weather_status
    #     - activity
    #     - photos
    #     - recommendations
    #     - firstrunwizard
    #     - nextcloud_announcements
    #     - contactsinteraction

    # - name: Customization of the nextcloud instance
    #   command: >
    #     docker exec -u www-data app_nc php occ theming:config {{ item.key }} "{{ item.value }}"
    #   with_items:
    #     - { key: 'color', value: "#808000"}
    #     - { key: 'name', value: "KanzDrive"}
    #     - { key: 'url', value: "nc_url"}
    #     - { key: 'slogan', value: "Your own secure and fast cloud storage service."}

  handlers:
    - name: Restart Apache
      service:
        name: apache2
        state: restarted
